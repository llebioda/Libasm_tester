#pragma once

#include <errno.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>

#define BENCHMARK_ITERATIONS 100000 // Number of times to run each function for benchmark

#ifndef TMP_DIR
# define TMP_DIR "tmp"
#endif

#define RESET  "\033[0m"
#define BLACK  "\033[0;30m"
#define RED    "\033[1;31m"
#define RED_   "\033[1;4;31m"
#define GREEN  "\033[1;32m"
#define YELLOW "\033[1;33m"
#define BLUE   "\033[0;34m"
#define PURPLE "\033[0;35m"
#define CYAN   "\033[0;36m"
#define WHITE  "\033[0;37m"
#define ORANGE "\033[1;38;5;214m"

#define BILLION 1000000000

#define
#define A_10_000 A_1_000 A_1_000 A_1_000 A_1_000 A_1_000 A_1_000 A_1_000 A_1_000 A_1_000 A_1_000
#define

extern char *A_1_000_000_000;

#define FALSE 0
#define TRUE 1

typedef int t_bool;

typedef struct s_list
{
    void *data;
    struct s_list *next;
} t_list;

const char *get_printable_str(const char *s);
void calculate_efficiency(const char *function_name, double time_lib, double time_ft);
void free_list(t_list **list);